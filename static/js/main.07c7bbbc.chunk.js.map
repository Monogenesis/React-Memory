{"version":3,"sources":["img/backside.png","components/MemCard.js","img/logo-react.png","img/angular.svg","img/logo-node.png","img/logo-knockout.png","img/logo-vue.png","img/logo-jquery.png","img/logo-ember.png","img/logo-bootstrap.png","img/logo-meteor.png","components/MemGame.js","App.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","currentlyRevealedCards","cardsHandledCounter","MemCard","props","useState","backsideImage","currentImage","setCurrentImage","locked","setLocked","classes","useEffect","length","status","id","image","pairFound","setTimeout","refresh","className","Card","CardActionArea","disabled","onClick","push","setRefresh","CardMedia","component","height","width","title","MemGame","game","setGame","startedPlaying","setStartedPlaying","startTime","setStartTime","images","reactImageLogo","angular","node","knockout","vue","jquery","ember","bootstrap","meteor","newGame","i","firstCard","secondCard","shuffledGame","sort","Math","random","Date","getTime","some","card","duration","toFixed","setLastScore","parseFloat","score","setScore","map","App","reset","setReset","highscore","setHighscore","lastScore","class","Button","variant","color","href","target","icon","faGithubSquare","faTwitterSquare","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07c7bbbc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/backside.e0bd9c76.png\";","import { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport backsideImage from \"../img/backside.png\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 200,\r\n  },\r\n});\r\n\r\nvar currentlyRevealedCards = []; // Contains the cards that are revealed in the current gamestep\r\nvar cardsHandledCounter = 0; // Counter to only affect the relevant cards, if component gets updated\r\n\r\nexport default function MemCard(props) {\r\n  const [currentImage, setCurrentImage] = useState(backsideImage);\r\n  const [locked, setLocked] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  function flipCard() {\r\n\r\n    // Add this card to the reavlead card array\r\n    currentlyRevealedCards.push(props);\r\n\r\n    // Disable all interaction with the component\r\n    setLocked(true);\r\n\r\n    // Show card frontside\r\n    setCurrentImage(props.status.image);\r\n\r\n    // Refresh all MemCard components\r\n    props.setRefresh(!props.refresh);\r\n  }\r\n\r\n  function flipBack() {\r\n\r\n    // Show card backside\r\n    setCurrentImage(backsideImage);\r\n\r\n    // Unlock the interactions with the component\r\n    setLocked(false);\r\n  }\r\n\r\n  // Clear the array when the game starts\r\n  useEffect(() => {\r\n    currentlyRevealedCards = [];\r\n  }, []);\r\n\r\n  // Check if this current component is part of the currently revealed cards\r\n  useEffect(() => {\r\n\r\n    // Only take action if two cards have been flipped\r\n    if (currentlyRevealedCards.length === 2) {\r\n\r\n      // Check if this component is one of the revealed cards\r\n      if (\r\n        props.status.id === currentlyRevealedCards[0].status.id ||\r\n        props.status.id === currentlyRevealedCards[1].status.id\r\n      )\r\n        // Check if the images match\r\n        if (\r\n          currentlyRevealedCards[0].status.image ===\r\n          currentlyRevealedCards[1].status.image\r\n        ) {\r\n\r\n          // Tell the game manager MemGame component that this cards pair has been found\r\n          props.status.pairFound = true;\r\n\r\n          // Lock the card for the rest of the game\r\n          setLocked(true);\r\n\r\n          cardsHandledCounter++;\r\n\r\n        } else {  // The images are not matching\r\n\r\n          // Delay the flip back action by one second\r\n          setTimeout(() => {\r\n            flipBack();\r\n          }, 1000);\r\n\r\n          cardsHandledCounter++;\r\n        }\r\n      if (cardsHandledCounter === 2) {\r\n\r\n        // Clear the revealed cards and reset the counter so the next two cards can be flipped\r\n        currentlyRevealedCards = [];\r\n\r\n        cardsHandledCounter = 0;\r\n      }\r\n    }\r\n\r\n  }, [props.refresh]);\r\n\r\n  return (\r\n    <div className=\"memCard\">\r\n      <Card className={classes.root}>\r\n        <CardActionArea disabled={locked} onClick={() => flipCard()}>\r\n          <CardMedia\r\n            component=\"img\"\r\n            height=\"200\"\r\n            width=\"200\"\r\n            image={currentImage}\r\n            title=\"React\"\r\n          />\r\n        </CardActionArea>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-react.ef20e673.png\";","export default __webpack_public_path__ + \"static/media/angular.904e1c3a.svg\";","export default __webpack_public_path__ + \"static/media/logo-node.c2e22c63.png\";","export default __webpack_public_path__ + \"static/media/logo-knockout.a05e9e70.png\";","export default __webpack_public_path__ + \"static/media/logo-vue.d54b99f6.png\";","export default __webpack_public_path__ + \"static/media/logo-jquery.f130f32f.png\";","export default __webpack_public_path__ + \"static/media/logo-ember.20db1e58.png\";","export default __webpack_public_path__ + \"static/media/logo-bootstrap.c2ff1a60.png\";","export default __webpack_public_path__ + \"static/media/logo-meteor.7fe63d86.png\";","import { useState, useEffect } from \"react\";\r\nimport MemCard from \"./MemCard.js\";\r\nimport reactImageLogo from \"../img/logo-react.png\";\r\nimport angular from \"../img/angular.svg\";\r\nimport node from \"../img/logo-node.png\";\r\nimport knockout from \"../img/logo-knockout.png\";\r\nimport vue from \"../img/logo-vue.png\";\r\nimport jquery from \"../img/logo-jquery.png\";\r\nimport ember from \"../img/logo-ember.png\";\r\nimport bootstrap from \"../img/logo-bootstrap.png\";\r\nimport meteor from \"../img/logo-meteor.png\";\r\n\r\nexport default function MemGame(props) {\r\n\r\n    // State to rerender the cards and check if the game is over\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    // The array of all the cards in the game\r\n    const [game, setGame] = useState([]);\r\n\r\n    // The state to check if the game has started\r\n    const [startedPlaying, setStartedPlaying] = useState(false);\r\n\r\n    // The start time when the player revealed the first card\r\n    const [startTime, setStartTime] = useState();\r\n\r\n    // The images used for the game\r\n    const images = [\r\n        reactImageLogo,\r\n        angular,\r\n        node,\r\n        knockout,\r\n        vue,\r\n        jquery,\r\n        ember,\r\n        bootstrap,\r\n        meteor,\r\n    ];\r\n\r\n    // Set up a new game when this component gets rerendered\r\n    useEffect(() => {\r\n\r\n        const newGame = [];\r\n\r\n        // Create the two card pairs from the images\r\n        for (let i = 0; i < images.length; i++) {\r\n            const firstCard = {\r\n                id: 2 * i,\r\n                pairFound: false,\r\n                image: images[i],\r\n            };\r\n\r\n            const secondCard = {\r\n                id: 2 * i + 1,\r\n                pairFound: false,\r\n                image: images[i],\r\n            };\r\n\r\n            newGame.push(firstCard);\r\n            newGame.push(secondCard);\r\n        }\r\n\r\n        // Shuffle the cards\r\n        const shuffledGame = newGame.sort(() => Math.random() - 0.5);\r\n\r\n        // Set the new game\r\n        setGame(shuffledGame);\r\n    }, []);\r\n\r\n    // Only execute this code when a MemCard updates the refresh state\r\n    useEffect(() => {\r\n\r\n        if (!startedPlaying) {\r\n            setStartedPlaying(true);\r\n            setStartTime(new Date().getTime());\r\n        }\r\n\r\n        // Find out if all card pairs have been found\r\n        const finished = !game.some((card) => !card.pairFound);\r\n        if (finished && game.length > 0) {\r\n\r\n            // Delay the result\r\n            setTimeout(() => {\r\n\r\n                // Get the duration since the game started and subtract the dalay\r\n                let duration = (\r\n                    (new Date().getTime() - startTime - 1000) /\r\n                    1000\r\n                ).toFixed(1);\r\n\r\n                props.setLastScore(duration);\r\n\r\n                // Check if the player was faster than the highscore\r\n                if (\r\n                    parseFloat(duration) < parseFloat(props.score) ||\r\n                    props.score === 0\r\n                ) {\r\n                    props.setScore(duration);\r\n                }\r\n\r\n            }, 1000);\r\n        }\r\n\r\n    }, [refresh]);\r\n\r\n    return (\r\n        <div className=\"cardContainer\">\r\n            {game.map((card) => (\r\n                <div className=\"card\">\r\n                    <MemCard refresh={refresh} setRefresh={setRefresh} status={card} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport MemGame from \"./components/MemGame.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitterSquare, faGithubSquare } from \"@fortawesome/free-brands-svg-icons\"\r\n\r\nexport default function App() {\r\n  const [reset, setReset] = useState(false);\r\n  const [highscore, setHighscore] = useState(0);\r\n  const [lastScore, setLastScore] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <div class=\"headline\">\r\n          <div class=\"title\">\r\n            Memory\r\n          </div>\r\n          <div class=\"scores\">\r\n            <div class=\"score\">\r\n              Highscore: {highscore}s\r\n            </div>\r\n            <div class=\"score\">\r\n              Last score: {lastScore}s\r\n            </div>\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setReset(true);\r\n              setTimeout(() => {\r\n                setReset(false);\r\n              }, 5);\r\n            }}\r\n          >\r\n            Start Game\r\n          </Button>\r\n        </div>\r\n        <div className=\"MemGame\">\r\n          {!reset ? <MemGame score={highscore} setScore={setHighscore} setLastScore={setLastScore} /> : <div>Resetting!</div>}\r\n        </div>\r\n        <div class=\"footer\">\r\n          made with React <br />\r\n          by <br />\r\n          <div class='creditName'>\r\n            <div class='author'>Magdalena Köhler</div>\r\n            <div class='socialLinks'>\r\n              <a href={\"https://github.com/LeniKoehler\"} target=\"_blank\">\r\n                <FontAwesomeIcon icon={faGithubSquare} color='white' /></a>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div class='creditName'>\r\n            <div class='author'>Amadeus Zittel</div>\r\n            <div class='socialLinks'>\r\n              <a href={\"https://github.com/Monogenesis\"} target=\"_blank\">\r\n                <FontAwesomeIcon icon={faGithubSquare} color='white' /></a>\r\n              <a href={\"https://twitter.com/AmadeusZittel\"} target=\"_blank\">\r\n                <FontAwesomeIcon icon={faTwitterSquare} color='#1DA1F2' /></a></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}